name: workflow to deploy Static Website, APIM, and Function API
on: 
  push:
    paths-ignore:
      - '**.md'


# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Set up the following secrets in your repository:
#   AZURE_CREDENTIALS
#
# 2. Change below variables for your configuration:
env:
  ENVIRONMENT_TYPE: 'test' # Only accept dev, test, prod
  AZURE_REGION: '<AZURE REGION>'
  APP_NAME_PREFIX: '<SOLUTION PREFIX>'
  APP_SOURCE_PATH: 'src'
  FUNCTIONAPP_PATH: 'api/dotnet/ToDoFunctionApp'
  OPEN_API: 'false'
  DOTNET_VERSION: '3.1.410'
  ANGULAR_PATH: 'client/angular/ToDoSpa'
  NODE_VERSION: '14'
  BICEP_FILE_PATH: 'deploy'
  MSI_NAME: '<MSI NAME>' # Change MSI name to your MSI name
  MSI_RESOURCE_GROUP: '<MSI RESOURCE GROUP>' # Change MSI resource group to your MSI resource group
  
jobs:
  Build_n_Deploy:
    runs-on: ubuntu-latest
    steps:
                
    # Authentication
    # Set up the following secrets in your repository: AZURE_CREDENTIALS
    # For details on usage of secrets, please refer https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}
    
    # Checkout
    - name: Checkout
      uses: actions/checkout@v1
    
    # Build ARM Template from Bicep and create a target Azure resource group  
    - name: Azure CLI - Create Resource Group
      id: resourceGroup
      shell: bash
      run: |
          export rg=${{ env.APP_NAME_PREFIX }}-${{ env.ENVIRONMENT_TYPE }}-rg
          az group create -l ${{ env.AZURE_REGION }} -n $rg
          echo ::set-output name=resourceGroup::$rg


    # Build ARM Template from Bicep and create a target Azure resource group  
    - name: Azure CLI - Validate Bicep file
      uses: Azure/cli@1.0.4
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        azcliversion: 2.27.2
        # Specify the script here
        inlineScript: |
          az deployment group validate -g ${{ env.APP_NAME_PREFIX }}-${{ env.ENVIRONMENT_TYPE }}-rg --template-file ./${{ env.BICEP_FILE_PATH }}/main.bicep
          az bicep upgrade 
          az bicep build --file ./${{ env.BICEP_FILE_PATH }}/main.bicep
          az bicep build --file ./${{ env.BICEP_FILE_PATH }}/api.bicep

    # Deployment Bicep template
    - name: Deploy ${{ env.ENVIRONMENT_TYPE }} Infrastructure
      id: infraDeployment
      uses: azure/arm-deploy@v1
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ steps.resourceGroup.outputs.resourceGroup }}
        template: ./${{ env.BICEP_FILE_PATH }}/main.json  # Set this to the location of your template file
        parameters: appNameSuffix=${{ env.APP_NAME_PREFIX }} environmentType=${{ env.ENVIRONMENT_TYPE }} userAssignedIdentityName=${{ env.MSI_NAME }} userAssignedIdentityResourceGroup=${{ env.MSI_RESOURCE_GROUP }}
        failOnStdErr: false

    # Setup .NET Core environment
    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Build .NET application
    - name: 'Build .NET application'
      shell: bash
      run: | 
        pushd ./${{ env.APP_SOURCE_PATH }}/${{ env.FUNCTIONAPP_PATH }}
        dotnet build --configuration Release --output ./outputs
        popd

    # Publish .NET application to Azure Function
    - name: 'Publish to Azure Functions'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ steps.infraDeployment.outputs.functionAppName }}
        package: ./${{ env.APP_SOURCE_PATH }}/${{ env.FUNCTIONAPP_PATH }}/outputs

    # Deployment Bicep template for APIM API 
    - name: Deploy ${{ env.ENVIRONMENT_TYPE }} API
      id: apiDeployment
      uses: azure/arm-deploy@v1
      with:
        deploymentName: '${{ github.run_number }}-api'
        resourceGroupName: ${{ steps.resourceGroup.outputs.resourceGroup }}
        template: ./${{ env.BICEP_FILE_PATH }}/api.json  # Set this to the location of your template file
        parameters: apimName=${{ steps.infraDeployment.outputs.apimName }} openApiUrl=https://${{ steps.infraDeployment.outputs.functionAppName }}.azurewebsites.net/api/swagger.json originUrl=${{ steps.infraDeployment.outputs.cdnEndpointURL }} apimApiName=2doOApi
        failOnStdErr: false

    # Run app registration PowerShell script
    - name: 'App Registration'
      id: appRegistration
      continue-on-error: true
      shell: pwsh
      run: |
        .\${{ env.BICEP_FILE_PATH }}\scripts\appRegistrationAndPermission.ps1 `
        -clientName ${{ env.APP_NAME_PREFIX }}${{ env.ENVIRONMENT_TYPE }} `
        -apiName fn-${{ env.APP_NAME_PREFIX }}-${{ env.ENVIRONMENT_TYPE }} `
        -resourceGroup ${{ steps.resourceGroup.outputs.resourceGroup }} `
        -staticWebURL ${{ steps.infraDeployment.outputs.cdnEndpointURL }}

    # Set app configurations of Angular
    - name: 'Replace tokens'
      uses: cschleiden/replace-tokens@v1.0
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: ${{ github.workspace }}/src/angular/src/app/app-config.json
      env: 
        clientAppId: ${{ steps.appRegistration.outputs.clientId }}
        clientAppURL: ${{ steps.infraDeployment.outputs.cdnEndpointURL }}
        apimURL: ${{ steps.infraDeployment.outputs.apiUrl }}
        backendAPIScope: ${{ steps.appRegistration.outputs.scope }}
        tenantDomainName: ${{ steps.appRegistration.outputs.tenantDomainName }}
    
    # Setup Node.js environment
    - name: Setup Node.js ${{ env.NODE_VERSION }} Environment
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    # Build Angular application
    - name: Build Angular application
      run: |
        pushd ./${{ env.APP_SOURCE_PATH }}/${{ env.ANGULAR_PATH }}
        npm install
        npm install -g @angular/cli
        ng build -c=production --output-path=./dist
        popd
    
    # Deploy Angular application to Storage Account
    - name: Publish static website to Azure storage account
      uses: Azure/cli@1.0.4
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        azcliversion: 2.21.0
        # Specify the script here
        inlineScript: az storage blob upload-batch -s ./${{ env.APP_SOURCE_PATH }}/${{ env.ANGULAR_PATH }}/dist -d '$web' --account-name ${{ steps.infraDeployment.outputs.staticWebsiteStorageAccountName }}

    # Purge CDN endpoint
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        azcliversion: 2.21.0
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name ${{ steps.infraDeployment.outputs.cdnProfileName }} --name ${{ steps.infraDeployment.outputs.cdnEndpointName }} --resource-group ${{ steps.resourceGroup.outputs.resourceGroup }}

    # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
